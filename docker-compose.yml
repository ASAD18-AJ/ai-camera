version: "3"
services:
  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    networks:
      - app-network
    depends_on:
      - backend

  # Node.js Backend Service
  backend:
    image: backend
    build:
      context: ./Backend
      dockerfile: backend.dockerfile
    ports:
      - "4000:4000"
    environment:
      DATABASE_URL: ${DATABASE_URL}
      REDIS_URL: ${REDIS_URL}
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      KAFKA_BROKER: ${KAFKA_BROKER} # Kafka broker added to backend environment
    depends_on:
      - db
      - redis
      - kafka
    networks:
      - app-network
    restart: always
    deploy:
      # replicas: 3
      restart_policy:
        condition: on-failure
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:4000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching
  redis:
    container_name: redis
    image: redis:alpine
    ports:
      - "6379:6379"
    networks:
      - app-network
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 3

  # PostgreSQL Database
  db:
    container_name: db
    image: postgres:12
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - app-network
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Kafka Service (Message Queue)
  kafka:
    container_name: kafka
    image: wurstmeister/kafka:latest
    ports:
      - "9092:9092"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092 # Where Kafka listens inside the container
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092 # What is advertised to external clients (Docker internal network)
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    depends_on:
      - zookeeper
    networks:
      - app-network
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "nc -z kafka 9092 || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Zookeeper for Kafka
  zookeeper:
    container_name: zookeeper
    image: wurstmeister/zookeeper:latest
    ports:
      - "2181:2181"
    networks:
      - app-network
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "echo ruok | nc localhost 2181 | grep imok || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Machine Learning Model Service (ML Backend)
  ml_backend:
    image: ml_backend
    build:
      context: ./ML_Backend
      dockerfile: ml_backend.dockerfile
    ports:
      - "8889:8889"
      - "8554:8554"
    networks:
      - app-network
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8889/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  pgdata: {}

networks:
  app-network:
    driver: bridge
